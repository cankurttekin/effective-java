when and how to create, when and how to avoid creating, how to ensure they are destroyed in a timely manner, and how to manage any cleanup actions


-- static factory methods instead of constructors
traditional way: public constructor
there is another technique, a class can provide a public static factory method. Which is simply a static method that returns an instance of the class. 

Ex. -a method translates a boolean primitive val into a Boolean object reference:-
public static Boolean valueOf(boolean b) {
	return b ? Boolean.TRUE : Boolean.FALSE;
}

Note; static factory method is not design pattern, not the same as the factory method pattern from design patterns. 

Providing a static factory method instead of a public constructor has both adv and disadv.

Advantage 1. unlike constructors they have names.
a static factory with a well chosen name is easier to use and the resulting client code easier to read.
For example, the constructor
BigInteger(int, int, Random) which returns a BigInteger that is probably prime would have been better expressed as a static factory method named 
BigInteger.probablePrime

A class can have only a single constructor with a given signature. Getting around this restriction by providing two constructors whose parameter lists differ only in the order of their parameter types. This is a reeally bad idea. User of such an API will never be able to remember which constructor is which and will end up calling the wrong one by mistake. People reading code that uses these constructors will not know what the code does without referring to the class documentation.
Static factory methods dont share the same restriction. in cases where a class seems to require multiple constructors with the same signature, replace the constructors with static factory methods and carefully chosen names to highlight their differences.

Advantage2. unlike constructors, they are not required to create a new object each time they are invoked.
This allows immutable classes to use preconstructed instances, or to cache instances as they are constructed and dispense them repeatedly to avoid creating unnecessary duplicate objects.
It never creates an object. This technique is similar to the Flyweight pattern. Can greatly improve performance if equivalent objects are requested often, especially if they are expensive to create.
returns same object from repeated invocations, allows classes to maintain strict control over what instances exists at any time. instance-controlled classes. instance control allows a class to guarantee that it is a singleton or noninstantiable. guarantees that no two equal instances exist

Advantage3. Unlike constructors, they can return an object of any subtype of their return type. An API can return objects without making their classes public. Hiding implementation classes in this fashion leads to a very compact API.
Programmer knows the returned object has precisely the API specified by its interface, so there is no need to read additional class doc for the impl class.
-Ex Java Collections-

Advantage4. class of the returned object can vary from call to call as a func. of the input parameters.

Advantage5. the class of the returned object need not exist when the class containing the method is written.
